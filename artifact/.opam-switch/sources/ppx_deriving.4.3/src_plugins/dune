(rule
 (deps ppx_deriving_show.cppo.ml)
 (targets ppx_deriving_show.ml)
 (action (run %{bin:cppo} -V OCAML:%{ocaml_version} %{deps} -o %{targets})))

(library
 (name ppx_deriving_show)
 (public_name ppx_deriving.show)
 (synopsis "[@@deriving show]")
 (modules ppx_deriving_show)
 (preprocess
  (action (run ppxfind -legacy ppx_tools.metaquot --as-pp %{input-file})))
 (libraries compiler-libs.common ppx_tools ppx_deriving.api)
 (kind ppx_deriver))

(rule
 (deps ppx_deriving_create.cppo.ml)
 (targets ppx_deriving_create.ml)
 (action (run %{bin:cppo} -V OCAML:%{ocaml_version} %{deps} -o %{targets})))

(library
 (name ppx_deriving_create)
 (public_name ppx_deriving.create)
 (synopsis "[@@deriving create]")
 (modules ppx_deriving_create)
 (preprocess
  (action (run ppxfind -legacy ppx_tools.metaquot --as-pp %{input-file})))
 (libraries compiler-libs.common ppx_tools ppx_deriving.api)
 (kind ppx_deriver))

(rule
 (deps ppx_deriving_enum.cppo.ml)
 (targets ppx_deriving_enum.ml)
 (action (run %{bin:cppo} -V OCAML:%{ocaml_version} %{deps} -o %{targets})))

(library
 (name ppx_deriving_enum)
 (public_name ppx_deriving.enum)
 (synopsis "[@@deriving enum]")
 (modules ppx_deriving_enum)
 (preprocess
  (action (run ppxfind -legacy ppx_tools.metaquot --as-pp %{input-file})))
 (libraries compiler-libs.common ppx_tools ppx_deriving.api)
 (kind ppx_deriver))

(rule
 (deps ppx_deriving_eq.cppo.ml)
 (targets ppx_deriving_eq.ml)
 (action (run %{bin:cppo} -V OCAML:%{ocaml_version} %{deps} -o %{targets})))

(library
 (name ppx_deriving_eq)
 (public_name ppx_deriving.eq)
 (synopsis "[@@deriving eq]")
 (modules ppx_deriving_eq)
 (preprocess
  (action (run ppxfind -legacy ppx_tools.metaquot --as-pp %{input-file})))
 (libraries compiler-libs.common ppx_tools ppx_deriving.api)
 (kind ppx_deriver))

(rule
 (deps ppx_deriving_fold.cppo.ml)
 (targets ppx_deriving_fold.ml)
 (action (run %{bin:cppo} -V OCAML:%{ocaml_version} %{deps} -o %{targets})))

(library
 (name ppx_deriving_fold)
 (public_name ppx_deriving.fold)
 (synopsis "[@@deriving fold]")
 (modules ppx_deriving_fold)
 (preprocess
  (action (run ppxfind -legacy ppx_tools.metaquot --as-pp %{input-file})))
 (libraries compiler-libs.common ppx_tools ppx_deriving.api)
 (kind ppx_deriver))

(rule
 (deps ppx_deriving_iter.cppo.ml)
 (targets ppx_deriving_iter.ml)
 (action (run %{bin:cppo} -V OCAML:%{ocaml_version} %{deps} -o %{targets})))

(library
 (name ppx_deriving_iter)
 (public_name ppx_deriving.iter)
 (synopsis "[@@deriving iter]")
 (modules ppx_deriving_iter)
 (preprocess
  (action (run ppxfind -legacy ppx_tools.metaquot --as-pp %{input-file})))
 (libraries compiler-libs.common ppx_tools ppx_deriving.api)
 (kind ppx_deriver))

(rule
 (deps ppx_deriving_make.cppo.ml)
 (targets ppx_deriving_make.ml)
 (action (run %{bin:cppo} -V OCAML:%{ocaml_version} %{deps} -o %{targets})))

(library
 (name ppx_deriving_make)
 (public_name ppx_deriving.make)
 (synopsis "[@@deriving make]")
 (modules ppx_deriving_make)
 (preprocess
  (action (run ppxfind -legacy ppx_tools.metaquot --as-pp %{input-file})))
 (libraries compiler-libs.common ppx_tools ppx_deriving.api)
 (kind ppx_deriver))

(rule
 (deps ppx_deriving_map.cppo.ml)
 (targets ppx_deriving_map.ml)
 (action (run %{bin:cppo} -V OCAML:%{ocaml_version} %{deps} -o %{targets})))

(library
 (name ppx_deriving_map)
 (public_name ppx_deriving.map)
 (synopsis "[@@deriving map]")
 (modules ppx_deriving_map)
 (preprocess
  (action (run ppxfind -legacy ppx_tools.metaquot --as-pp %{input-file})))
 (libraries compiler-libs.common ppx_tools ppx_deriving.api)
 (kind ppx_deriver))

(rule
 (deps ppx_deriving_ord.cppo.ml)
 (targets ppx_deriving_ord.ml)
 (action (run %{bin:cppo} -V OCAML:%{ocaml_version} %{deps} -o %{targets})))

(library
 (name ppx_deriving_ord)
 (public_name ppx_deriving.ord)
 (synopsis "[@@deriving ord]")
 (modules ppx_deriving_ord)
 (preprocess
  (action (run ppxfind -legacy ppx_tools.metaquot --as-pp %{input-file})))
 (libraries compiler-libs.common ppx_tools ppx_deriving.api)
 (kind ppx_deriver))

(library
 (name ppx_deriving_std)
 (public_name ppx_deriving.std)
 (synopsis "Meta-package for all built-in derivers")
 (modules ppx_deriving_std)
 (libraries
   ppx_deriving_ord
   ppx_deriving_map
   ppx_deriving_iter
   ppx_deriving_enum
   ppx_deriving_show
   ppx_deriving_eq
   ppx_deriving_make
   ppx_deriving_create
   ppx_deriving_fold)
 (kind ppx_deriver))
